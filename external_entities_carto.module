<?php

/**
 * @file external_entities_carto.module
 *
 * Core functionality for the External entities CARTO module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter() for external_entity_type_form().
 */
function external_entities_carto_form_external_entity_type_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'external_entities_carto_type_validate';
}

/**
 * CARTO Client validation handler.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function external_entities_carto_type_validate(array $form, FormStateInterface $form_state) {
  if ($form_state->getValue('client') == 'carto_client') {
    external_entities_carto_type_validate_format($form, $form_state);
    external_entities_carto_type_validate_pager($form, $form_state);
    external_entities_carto_type_validate_field_mapping($form, $form_state);
  }
}

/**
 * CARTO Client format validation handler.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function external_entities_carto_type_validate_format(array $form, FormStateInterface $form_state) {
  if ($form_state->getValue('format') != 'json') {
    $form_state->setError($form['storage_settings']['format'], t('CARTO Storage client requires JSON format.'));
  }
}

/**
 * CARTO Client pager validation handler.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function external_entities_carto_type_validate_pager(array $form, FormStateInterface $form_state) {
  $pager_settings = $form_state->getValue('pager_settings');
  if ($pager_settings['page_parameter_type'] != 'startitem') {
    $form_state->setError($form['pager_settings']['page_parameter_type'], t('CARTO Storage client requires "Starting item" page parameter type.'));
  }

  if ($pager_settings['page_size_parameter_type'] != 'pagesize') {
    $form_state->setError($form['pager_settings']['page_size_parameter_type'], t('CARTO Storage client requires "Number of items per page" page size parameter type.'));
  }
}

/**
 * CARTO Client field mapping validation handler.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function external_entities_carto_type_validate_field_mapping(array $form, FormStateInterface $form_state) {
  if ($form_state->getValue(['field_mappings', 'id']) != 'cartodb_id') {
    $form_state->setError($form['storage_settings']['format'], t('CARTO Storage client requires "cartodb_id" as External Entity ID.'));
  }
}
